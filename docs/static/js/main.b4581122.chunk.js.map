{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGIfs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKd,SACQ,uBACIO,KAAK,OACLC,YAAa,iCACbC,MAAQV,EACRW,SAnBU,SAACR,GACvBF,EAAcE,EAAES,OAAOF,a,QCPlBG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEpC,OACI,sBAAKC,UAAY,yCAAjB,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCJHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAFa,iDAEoCO,UAAUF,GAF9C,8DAGKG,MAAMR,GAHX,cAGbS,EAHa,gBAIEA,EAAUC,OAJZ,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVvB,kBAaZY,GAbY,4CAAH,sDCCPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAErB,ECFwB,SAACA,GAEzB,MAA0BtB,mBAAS,CAC/B4B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WAENjB,EAAQC,GACHiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAIvB,CAACb,IAIIc,EDnBwBK,CAAanB,GAAhCU,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,QAGpB,OACI,qCACA,oBAAIjB,UAAU,qCAAd,SAAoDI,IACnDa,GAAW,mBAAGjB,UAAW,mCAAd,uBACZ,qBAAKA,UAAW,YAAhB,SAEMc,EAAOF,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEQA,GADEA,EAAIhB,aEWf2B,EAvBM,WAErB,MAAoC1C,mBAAS,CAAC,kBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAGA,OAAQ,qCACI,oBAAImB,UAAW,SAAf,0BACA,uBACA,cAAC,EAAD,CAAanB,cAAeA,IAC5B,uBACA,6BAEQ4C,EAAWb,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAYA,GADNA,Y,MCX9BsB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b4581122.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n        setCategories(cats => [inputValue, ...cats]);\r\n        setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= {handleSubmit}>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder= \"Escriba el tema de su Gif.....\"\r\n                    value= {inputValue}\r\n                    onChange= {handleInputChange}\r\n                />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    return(\r\n        <div className = \"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}","\r\n\r\nexport const getGIfs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=YjMClhgGjPCK87GUHZefH80JJCMBBOrw`\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n  \r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n};","import {GifGridItem} from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n \r\n    return (\r\n        <>\r\n        <h3 className=\" animate__animated animate__fadeIn\">{category}</h3>\r\n        {loading && <p className= \"animate__animated animate__flash\">Loading..</p> }\r\n        <div className= \"card-grid\">\r\n            {   \r\n              images.map( img =>\r\n                <GifGridItem \r\n                    key ={img.id}\r\n                    {...img} \r\n                />                        \r\n               )\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGIfs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n\r\n        getGIfs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })//setState\r\n            })\r\n\r\n    },[category]) \r\n//useEffect lo que hace es recargar el componente solo si cambia lo que esta entre [] osea solo si cambia category\r\n//para que no afecte nigun boton o algo externo haga que se vuelva a cargar el componente o en este caso el getGifs\r\n\r\n    return state; //{data:[], loading:true};\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = ()=>{\r\n\r\nconst [categories, setCategories] = useState(['One Punch man'])\r\n\r\n\r\nreturn  <>\r\n            <h2 className= \"titulo\">GifExpertApp</h2>\r\n            <br />\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <nl>\r\n                {   \r\n                    categories.map(category =>\r\n                        <GifGrid\r\n                        key= {category} \r\n                        category = {category} \r\n                        />\r\n                    )\r\n                }\r\n            </nl>\r\n        </>\r\n\r\n}; \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}